<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="C:\Users\amish_000\Desktop\MULLESSONS UserSec--190514-1930\UserSec\UserSecDO\bin\Debug\UserSecDO.dll">
   <Modules>
    <Module Name="usersecdo.dll">
     <Namespaces>
      <Namespace Name="UserSecDAL">
       <Types>
        <Type Name="CompanyDAL" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ActivateCompany(UserSecBE.CompanyBE)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-02-08 17:40:08Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\amish_000\Desktop\PD-amish(Imp)\MULLESSONS UserSec--190514-1930\UserSec\UserSecDO" File="CompanyDAL.cs" Line="112">Object 'con' can be disposed more than once in method 'CompanyDAL.ActivateCompany(CompanyBE)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 112</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UserDAL" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CheckConfirmationRequest(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-02-08 17:40:08Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\amish_000\Desktop\PD-amish(Imp)\MULLESSONS UserSec--190514-1930\UserSec\UserSecDO" File="UserDAL.cs" Line="408">Object 'con' can be disposed more than once in method 'UserDAL.CheckConfirmationRequest(string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 408</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2015-02-08 17:40:08Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\amish_000\Desktop\PD-amish(Imp)\MULLESSONS UserSec--190514-1930\UserSec\UserSecDO" File="UserDAL.cs" Line="402">'UserDAL.CheckConfirmationRequest(string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUsers()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-02-08 17:40:08Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\amish_000\Desktop\PD-amish(Imp)\MULLESSONS UserSec--190514-1930\UserSec\UserSecDO" File="UserDAL.cs" Line="346">Object 'con' can be disposed more than once in method 'UserDAL.GetUsers()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 346</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2015-02-08 17:40:08Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\amish_000\Desktop\PD-amish(Imp)\MULLESSONS UserSec--190514-1930\UserSec\UserSecDO" File="UserDAL.cs" Line="340">'UserDAL.GetUsers()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertUser(UserSecBE.UserBE)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-02-08 17:40:08Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\amish_000\Desktop\PD-amish(Imp)\MULLESSONS UserSec--190514-1930\UserSec\UserSecDO" File="UserDAL.cs" Line="378">Object 'con' can be disposed more than once in method 'UserDAL.InsertUser(UserBE)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 378</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2015-02-08 17:40:08Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\amish_000\Desktop\PD-amish(Imp)\MULLESSONS UserSec--190514-1930\UserSec\UserSecDO" File="UserDAL.cs" Line="372">'UserDAL.InsertUser(UserBE)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveConfirmation(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-02-08 17:40:08Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\amish_000\Desktop\PD-amish(Imp)\MULLESSONS UserSec--190514-1930\UserSec\UserSecDO" File="UserDAL.cs" Line="435">Object 'con' can be disposed more than once in method 'UserDAL.SaveConfirmation(string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 435</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2015-02-08 17:40:08Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\amish_000\Desktop\PD-amish(Imp)\MULLESSONS UserSec--190514-1930\UserSec\UserSecDO" File="UserDAL.cs" Line="429">'UserDAL.SaveConfirmation(string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 435</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
